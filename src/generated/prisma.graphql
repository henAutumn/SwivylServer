# source: https://us1.prisma.sh/public-amberlantern-148/my-app/dev
# timestamp: Tue May 15 2018 22:00:05 GMT-0400 (US Eastern Daylight Time)

type Agency implements Node {
  id: ID!
  masteruser: String!
  name: String!
  img: String!
  teammembers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type AgencyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AgencyEdge]!
  aggregate: AggregateAgency!
}

input AgencyCreateInput {
  masteruser: String!
  name: String!
  img: String!
  teammembers: UserCreateManyWithoutAgencyInput
}

input AgencyCreateOneWithoutTeammembersInput {
  create: AgencyCreateWithoutTeammembersInput
  connect: AgencyWhereUniqueInput
}

input AgencyCreateWithoutTeammembersInput {
  masteruser: String!
  name: String!
  img: String!
}

"""An edge in a connection."""
type AgencyEdge {
  """The item at the end of the edge."""
  node: Agency!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AgencyOrderByInput {
  id_ASC
  id_DESC
  masteruser_ASC
  masteruser_DESC
  name_ASC
  name_DESC
  img_ASC
  img_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AgencyPreviousValues {
  id: ID!
  masteruser: String!
  name: String!
  img: String!
}

type AgencySubscriptionPayload {
  mutation: MutationType!
  node: Agency
  updatedFields: [String!]
  previousValues: AgencyPreviousValues
}

input AgencySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AgencySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AgencySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AgencySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AgencyWhereInput
}

input AgencyUpdateInput {
  masteruser: String
  name: String
  img: String
  teammembers: UserUpdateManyWithoutAgencyInput
}

input AgencyUpdateOneWithoutTeammembersInput {
  create: AgencyCreateWithoutTeammembersInput
  connect: AgencyWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AgencyUpdateWithoutTeammembersDataInput
  upsert: AgencyUpsertWithoutTeammembersInput
}

input AgencyUpdateWithoutTeammembersDataInput {
  masteruser: String
  name: String
  img: String
}

input AgencyUpsertWithoutTeammembersInput {
  update: AgencyUpdateWithoutTeammembersDataInput!
  create: AgencyCreateWithoutTeammembersInput!
}

input AgencyWhereInput {
  """Logical AND on all given filters."""
  AND: [AgencyWhereInput!]

  """Logical OR on all given filters."""
  OR: [AgencyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AgencyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  masteruser: String

  """All values that are not equal to given value."""
  masteruser_not: String

  """All values that are contained in given list."""
  masteruser_in: [String!]

  """All values that are not contained in given list."""
  masteruser_not_in: [String!]

  """All values less than the given value."""
  masteruser_lt: String

  """All values less than or equal the given value."""
  masteruser_lte: String

  """All values greater than the given value."""
  masteruser_gt: String

  """All values greater than or equal the given value."""
  masteruser_gte: String

  """All values containing the given string."""
  masteruser_contains: String

  """All values not containing the given string."""
  masteruser_not_contains: String

  """All values starting with the given string."""
  masteruser_starts_with: String

  """All values not starting with the given string."""
  masteruser_not_starts_with: String

  """All values ending with the given string."""
  masteruser_ends_with: String

  """All values not ending with the given string."""
  masteruser_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  img: String

  """All values that are not equal to given value."""
  img_not: String

  """All values that are contained in given list."""
  img_in: [String!]

  """All values that are not contained in given list."""
  img_not_in: [String!]

  """All values less than the given value."""
  img_lt: String

  """All values less than or equal the given value."""
  img_lte: String

  """All values greater than the given value."""
  img_gt: String

  """All values greater than or equal the given value."""
  img_gte: String

  """All values containing the given string."""
  img_contains: String

  """All values not containing the given string."""
  img_not_contains: String

  """All values starting with the given string."""
  img_starts_with: String

  """All values not starting with the given string."""
  img_not_starts_with: String

  """All values ending with the given string."""
  img_ends_with: String

  """All values not ending with the given string."""
  img_not_ends_with: String
  teammembers_every: UserWhereInput
  teammembers_some: UserWhereInput
  teammembers_none: UserWhereInput
}

input AgencyWhereUniqueInput {
  id: ID
}

type AggregateAgency {
  count: Int!
}

type AggregateUpload {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createAgency(data: AgencyCreateInput!): Agency!
  createUpload(data: UploadCreateInput!): Upload!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateAgency(data: AgencyUpdateInput!, where: AgencyWhereUniqueInput!): Agency
  updateUpload(data: UploadUpdateInput!, where: UploadWhereUniqueInput!): Upload
  deleteUser(where: UserWhereUniqueInput!): User
  deleteAgency(where: AgencyWhereUniqueInput!): Agency
  deleteUpload(where: UploadWhereUniqueInput!): Upload
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertAgency(where: AgencyWhereUniqueInput!, create: AgencyCreateInput!, update: AgencyUpdateInput!): Agency!
  upsertUpload(where: UploadWhereUniqueInput!, create: UploadCreateInput!, update: UploadUpdateInput!): Upload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyAgencies(data: AgencyUpdateInput!, where: AgencyWhereInput): BatchPayload!
  updateManyUploads(data: UploadUpdateInput!, where: UploadWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyAgencies(where: AgencyWhereInput): BatchPayload!
  deleteManyUploads(where: UploadWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  agencies(where: AgencyWhereInput, orderBy: AgencyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Agency]!
  uploads(where: UploadWhereInput, orderBy: UploadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Upload]!
  user(where: UserWhereUniqueInput!): User
  agency(where: AgencyWhereUniqueInput!): Agency
  upload(where: UploadWhereUniqueInput!): Upload
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  agenciesConnection(where: AgencyWhereInput, orderBy: AgencyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AgencyConnection!
  uploadsConnection(where: UploadWhereInput, orderBy: UploadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UploadConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  agency(where: AgencySubscriptionWhereInput): AgencySubscriptionPayload
  upload(where: UploadSubscriptionWhereInput): UploadSubscriptionPayload
}

type Upload implements Node {
  id: ID!
  name: String!
  type: String!
  size: Int!
  path: String!
}

"""A connection to a list of items."""
type UploadConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UploadEdge]!
  aggregate: AggregateUpload!
}

input UploadCreateInput {
  name: String!
  type: String!
  size: Int!
  path: String!
}

"""An edge in a connection."""
type UploadEdge {
  """The item at the end of the edge."""
  node: Upload!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UploadOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  type_ASC
  type_DESC
  size_ASC
  size_DESC
  path_ASC
  path_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UploadPreviousValues {
  id: ID!
  name: String!
  type: String!
  size: Int!
  path: String!
}

type UploadSubscriptionPayload {
  mutation: MutationType!
  node: Upload
  updatedFields: [String!]
  previousValues: UploadPreviousValues
}

input UploadSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UploadSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UploadSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UploadSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UploadWhereInput
}

input UploadUpdateInput {
  name: String
  type: String
  size: Int
  path: String
}

input UploadWhereInput {
  """Logical AND on all given filters."""
  AND: [UploadWhereInput!]

  """Logical OR on all given filters."""
  OR: [UploadWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UploadWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  size: Int

  """All values that are not equal to given value."""
  size_not: Int

  """All values that are contained in given list."""
  size_in: [Int!]

  """All values that are not contained in given list."""
  size_not_in: [Int!]

  """All values less than the given value."""
  size_lt: Int

  """All values less than or equal the given value."""
  size_lte: Int

  """All values greater than the given value."""
  size_gt: Int

  """All values greater than or equal the given value."""
  size_gte: Int
  path: String

  """All values that are not equal to given value."""
  path_not: String

  """All values that are contained in given list."""
  path_in: [String!]

  """All values that are not contained in given list."""
  path_not_in: [String!]

  """All values less than the given value."""
  path_lt: String

  """All values less than or equal the given value."""
  path_lte: String

  """All values greater than the given value."""
  path_gt: String

  """All values greater than or equal the given value."""
  path_gte: String

  """All values containing the given string."""
  path_contains: String

  """All values not containing the given string."""
  path_not_contains: String

  """All values starting with the given string."""
  path_starts_with: String

  """All values not starting with the given string."""
  path_not_starts_with: String

  """All values ending with the given string."""
  path_ends_with: String

  """All values not ending with the given string."""
  path_not_ends_with: String
}

input UploadWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  firstName: String
  lastName: String
  agency(where: AgencyWhereInput): Agency
  title: String
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  firstName: String
  lastName: String
  title: String
  agency: AgencyCreateOneWithoutTeammembersInput
}

input UserCreateManyWithoutAgencyInput {
  create: [UserCreateWithoutAgencyInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutAgencyInput {
  email: String!
  password: String!
  firstName: String
  lastName: String
  title: String
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  firstName: String
  lastName: String
  title: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  firstName: String
  lastName: String
  title: String
  agency: AgencyUpdateOneWithoutTeammembersInput
}

input UserUpdateManyWithoutAgencyInput {
  create: [UserCreateWithoutAgencyInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutAgencyInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutAgencyInput!]
}

input UserUpdateWithoutAgencyDataInput {
  email: String
  password: String
  firstName: String
  lastName: String
  title: String
}

input UserUpdateWithWhereUniqueWithoutAgencyInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutAgencyDataInput!
}

input UserUpsertWithWhereUniqueWithoutAgencyInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutAgencyDataInput!
  create: UserCreateWithoutAgencyInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  agency: AgencyWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
